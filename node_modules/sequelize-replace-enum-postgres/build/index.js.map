{"version":3,"sources":["../src/index.js"],"names":["args","tableName","columnName","defaultValue","newValues","queryInterface","sequelizeOptions","enumName","newEnumName","sequelize","transaction","t","newSequelizeOptions","createEnum","name","values","then","unsetDefaultValueFromEnum","setColumnTypeToEnum","dropEnum","renameEnum","oldEnumName","setColumnDefault","defaultValueType","query","getQueryToCreateEnum","join","getQueryToRemoveDefaultFromColumn","getQueryToSetEnumType","getQueryToDropEnum","getQueryToRenameEnum","getQueryToSetColumnDefault"],"mappings":"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","sourcesContent":["/**\n * Since PostgreSQL still does not support remove values from an ENUM,\n * the workaround is to create a new ENUM with the new values and use it\n * to replace the other.\n *\n * @param {Object} args\n * @param {String} args.tableName\n * @param {String} args.columnName\n * @param {String} args.defaultValue\n * @param {Array}  args.newValues\n * @param {Object} args.queryInterface\n * @param {String} args.enumName - Optional.\n *\n * @return {Promise}\n */\nexport default (args) => {\n  const {\n    tableName,\n    columnName,\n    defaultValue,\n    newValues,\n    queryInterface,\n    sequelizeOptions = {},\n    enumName = `enum_${tableName}_${columnName}`\n  } = args;\n\n  const newEnumName = `${enumName}_new`;\n\n  return queryInterface.sequelize.transaction(sequelizeOptions, (t) => {\n    const newSequelizeOptions = {\n      ...(sequelizeOptions || {}),\n      transaction: t\n    };\n\n    // Create a copy of the type\n    return createEnum({\n      queryInterface,\n      name: newEnumName,\n      values: newValues,\n      sequelizeOptions: newSequelizeOptions\n    })\n      // Drop default value (ALTER COLUMN cannot cast default values)\n      .then(() => defaultValue && unsetDefaultValueFromEnum({\n        queryInterface,\n        tableName,\n        columnName,\n        sequelizeOptions: newSequelizeOptions\n      }))\n      // Change column type to the new ENUM TYPE\n      .then(() => setColumnTypeToEnum({\n        tableName,\n        columnName,\n        enumName: newEnumName,\n        queryInterface,\n        sequelizeOptions: newSequelizeOptions\n      }))\n      // Drop old ENUM\n      .then(() => dropEnum(\n        {\n          name: enumName,\n          sequelizeOptions: newSequelizeOptions,\n          queryInterface\n        }\n      ))\n      // Rename new ENUM name\n      .then(() => renameEnum({\n        oldEnumName: newEnumName,\n        newEnumName: enumName,\n        queryInterface,\n        sequelizeOptions: newSequelizeOptions\n      }))\n      .then(() => defaultValue && setColumnDefault({\n        tableName,\n        columnName,\n        defaultValue,\n        defaultValueType: enumName,\n        queryInterface,\n        sequelizeOptions: newSequelizeOptions\n      }));\n  });\n};\n\n/**\n * Create a new ENUM.\n *\n * @param {Object}   args\n * @param {String}   args.name\n * @param {String[]} args.values\n * @param {Object}   args.sequelizeOptions\n * @param {Object}   args.queryInterface\n *\n * @return {Promise}\n */\nexport function createEnum(args) {\n  return args.queryInterface.sequelize.query(\n    getQueryToCreateEnum(args.name, args.values),\n    args.sequelizeOptions\n  );\n}\n\n/**\n * Returns the query to create an Enum.\n *\n * @param {String}   name\n * @param {String[]} values\n *\n * @return {String}\n */\nexport function getQueryToCreateEnum(name, values) {\n  return `CREATE TYPE \"${name}\" AS ENUM ('${values.join('\\', \\'')}')`;\n}\n\n/**\n * Unset default value from ENUM.\n *\n * @param {Object} args\n * @param {String} args.tableName\n * @param {String} args.columnName\n * @param {Object} args.sequelizeOptions\n * @param {Object} args.queryInterface\n *\n * @return {Promise}\n */\nexport function unsetDefaultValueFromEnum(args) {\n  return args.queryInterface.sequelize.query(\n    getQueryToRemoveDefaultFromColumn(args.tableName, args.columnName),\n    args.sequelizeOptions\n  );\n}\n\n/**\n * Get the query to drop default value for a column.\n *\n * @param {String} tableName\n * @param {String} columnName\n *\n * @return {String}\n */\nexport function getQueryToRemoveDefaultFromColumn(tableName, columnName) {\n  return `ALTER TABLE \"${tableName}\" ALTER COLUMN \"${columnName}\" DROP DEFAULT`;\n}\n\n/**\n * Set the column type to an Enum.\n *\n * @param {Object} args\n * @param {String} args.tableName\n * @param {String} args.columnName\n * @param {String} args.enumName\n * @param {Object} args.sequelizeOptions\n *\n * @return {Promise}\n */\nexport function setColumnTypeToEnum(args) {\n  return args.queryInterface.sequelize.query(\n    getQueryToSetEnumType(args.tableName, args.columnName, args.enumName),\n    args.sequelizeOptions\n  );\n}\n\n/**\n * Get the query to set a column type to an Enum.\n *\n * @param {String} tableName\n * @param {String} columnName\n * @param {String} enumName\n *\n * @return {String}\n */\nexport function getQueryToSetEnumType(tableName, columnName, enumName) {\n  return `\n    ALTER TABLE \"${tableName}\"\n      ALTER COLUMN \"${columnName}\"\n        TYPE \"${enumName}\"\n        USING (\"${columnName}\"::text::\"${enumName}\")\n  `;\n}\n\n/**\n * Drop an Enum.\n *\n * @param {Object} args\n * @param {Object} args.queryInterface\n * @param {String} args.name\n * @param {Object} args.sequelizeOptions\n *\n * @return {Promise}\n */\nexport function dropEnum(args) {\n  return args.queryInterface.sequelize.query(\n    getQueryToDropEnum(args.name),\n    args.sequelizeOptions\n  );\n}\n\n/**\n * Get the query to drop an Enum.\n *\n * @param {String} name\n *\n * @return {String}\n */\nexport function getQueryToDropEnum(name) {\n  return `DROP TYPE \"${name}\"`;\n}\n\n/**\n * Rename an Enum.\n *\n * @param {Object} args\n * @param {Object} args.queryInterface\n * @param {String} args.oldEnumName\n * @param {String} args.newEnumName\n * @param {Object} args.sequelizeOptions\n *\n * @return {Promise}\n */\nexport function renameEnum(args) {\n  return args.queryInterface.sequelize.query(\n    getQueryToRenameEnum(args.oldEnumName, args.newEnumName),\n    args.sequelizeOptions\n  );\n}\n\n/**\n * Get the query to rename an enum.\n *\n * @param {String} oldEnumName\n * @param {String} newEnumName\n *\n * @return {String}\n */\nexport function getQueryToRenameEnum(oldEnumName, newEnumName) {\n  return `ALTER TYPE \"${oldEnumName}\" RENAME TO \"${newEnumName}\"`;\n}\n\n/**\n * Set the default value for a column.\n *\n * @param {Object} args\n * @param {Object} args.queryInterface\n * @param {String} args.tableName\n * @param {String} args.columnName\n * @param {String} args.defaultValue\n * @param {String} args.defaultValueType\n * @param {Object} args.sequelizeOptions\n *\n * @return {Promise}\n */\nexport function setColumnDefault(args) {\n  return args.queryInterface.sequelize.query(\n    getQueryToSetColumnDefault(\n      args.tableName,\n      args.columnName,\n      args.defaultValue,\n      args.defaultValueType\n    ),\n    args.sequelizeOptions\n  );\n}\n\n/**\n * Get the query to set the default value for a column.\n *\n * @param {String} tableName\n * @param {String} columnName\n * @param {String} defaultValue\n * @param {String} defaultValueType\n *\n * @return {String}\n */\nexport function getQueryToSetColumnDefault(\n  tableName,\n  columnName,\n  defaultValue,\n  defaultValueType\n) {\n  return `\n    ALTER TABLE \"${tableName}\"\n      ALTER COLUMN \"${columnName}\"\n        SET DEFAULT '${defaultValue}'::\"${defaultValueType}\"\n  `;\n}\n"],"file":"index.js"}