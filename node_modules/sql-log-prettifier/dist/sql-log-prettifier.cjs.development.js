'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var chalk = _interopDefault(require('chalk'));
var sqlFormatter = _interopDefault(require('sql-formatter'));

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _taggedTemplateLiteralLoose(strings, raw) {
  if (!raw) {
    raw = strings.slice(0);
  }

  strings.raw = raw;
  return strings;
}

var operators = ['AND', 'BETWEEN', 'IN', 'LIKE', 'NOT', 'OR', 'IS', 'DIV', 'REGEXP', 'RLIKE', 'SOUNDS LIKE', 'XOR'];
var functions = ['ASCII', 'CHAR_LENGTH', 'CHARACTER_LENGTH', 'CONCAT', 'CONCAT_WS', 'FIELD', 'FIND_IN_SET', 'FORMAT', 'INSERT', 'INSTR', 'LCASE', 'LEFT', 'LENGTH', 'LOCATE', 'LOWER', 'LPAD', 'LTRIM', 'MID', 'POSITION', 'REPEAT', 'REPLACE', 'REVERSE', 'RIGHT', 'RPAD', 'RTRIM', 'SPACE', 'STRCMP', 'SUBSTR', 'SUBSTRING', 'SUBSTRING_INDEX', 'TRIM', 'UCASE', 'UPPER', 'ABS', 'ACOS', 'ASIN', 'ATAN', 'ATAN2', 'AVG', 'CEIL', 'CEILING', 'COS', 'COT', 'COUNT', 'DEGREES', 'DIV', 'EXP', 'FLOOR', 'GREATEST', 'LEAST', 'LN', 'LOG', 'LOG10', 'LOG2', 'MAX', 'MIN', 'MOD', 'PI', 'POW', 'POWER', 'RADIANS', 'RAND', 'ROUND', 'SIGN', 'SIN', 'SQRT', 'SUM', 'TAN', 'TRUNCATE', 'ADDDATE', 'ADDTIME', 'CURDATE', 'CURRENT_DATE', 'CURRENT_TIME', 'CURRENT_TIMESTAMP', 'CURTIME', 'DATE', 'DATEDIFF', 'DATE_ADD', 'DATE_FORMAT', 'DATE_SUB', 'DAY', 'DAYNAME', 'DAYOFMONTH', 'DAYOFWEEK', 'DAYOFYEAR', 'EXTRACT', 'FROM_DAYS', 'HOUR', 'LAST_DAY', 'LOCALTIME', 'LOCALTIMESTAMP', 'MAKEDATE', 'MAKETIME', 'MICROSECOND', 'MINUTE', 'MONTH', 'MONTHNAME', 'NOW', 'PERIOD_ADD', 'PERIOD_DIFF', 'QUARTER', 'SECOND', 'SEC_TO_TIME', 'STR_TO_DATE', 'SUBDATE', 'SUBTIME', 'SYSDATE', 'TIME', 'TIME_FORMAT', 'TIME_TO_SEC', 'TIMEDIFF', 'TIMESTAMP', 'TO_DAYS', 'WEEK', 'WEEKDAY', 'WEEKOFYEAR', 'YEAR', 'YEARWEEK', 'BIN', 'BINARY', 'CASE', 'CAST', 'COALESCE', 'CONNECTION_ID', 'CONV', 'CONVERT', 'CURRENT_USER', 'DATABASE', 'IF', 'IFNULL', 'ISNULL', 'LAST_INSERT_ID', 'NULLIF', 'SESSION_USER', 'SYSTEM_USER', 'USER', 'VERSION'];
var keywords = ['ACCESSIBLE', 'ACTION', 'ADD CONSTRAINT', 'ADD', 'AGAINST', 'AGGREGATE', 'ALGORITHM', 'ALL', 'ALTER COLUMN', 'ALTER TABLE', 'ALTER', 'ANALYSE', 'ANALYZE', 'AND', 'ANY', 'AS', 'ASC', 'AUTO_INCREMENT', 'AUTOCOMMIT', 'BACKUP DATABASE', 'BACKUP', 'BEGIN', 'BETWEEN', 'BINLOG', 'BOTH', 'CASCADE', 'CASE', 'CHANGE', 'CHANGED', 'CHARACTER SET', 'CHARSET', 'CHECK', 'CHECKSUM', 'COLLATE', 'COLLATION', 'COLUMN', 'COLUMNS', 'COMMENT', 'COMMIT', 'COMMITTED', 'COMPRESSED', 'CONCURRENT', 'CONSTRAINT', 'CONTAINS', 'CREATE DATABASE', 'CREATE INDEX', 'CREATE OR REPLACE VIEW', 'CREATE PROCEDURE', 'CREATE TABLE', 'CREATE UNIQUE INDEX', 'CREATE VIEW', 'CREATE', 'CROSS', 'DATABASE', 'DATABASES', 'DAY_HOUR', 'DAY_MINUTE', 'DAY_SECOND', 'DEFAULT', 'DEFINER', 'DELAYED', 'DELETE', 'DESC', 'DESCRIBE', 'DETERMINISTIC', 'DISTINCT', 'DISTINCTROW', 'DO', 'DROP COLUMN', 'DROP CONSTRAINT', 'DROP DATABASE', 'DROP DEFAULT', 'DROP INDEX', 'DROP TABLE', 'DROP VIEW', 'DROP', 'DUMPFILE', 'DUPLICATE', 'DYNAMIC', 'ELSE', 'ENCLOSED', 'END', 'ENGINE_TYPE', 'ENGINE', 'ENGINES', 'ESCAPE', 'ESCAPED', 'EVENTS', 'EXEC', 'EXECUTE', 'EXISTS', 'EXPLAIN', 'EXTENDED', 'FAST', 'FETCH', 'FIELDS', 'FILE', 'FIRST', 'FIXED', 'FLUSH', 'FOR', 'FORCE', 'FOREIGN KEY', 'FOREIGN', 'FROM', 'FULL OUTER JOIN', 'FULL', 'FULLTEXT', 'FUNCTION', 'GLOBAL', 'GRANT', 'GRANTS', 'GROUP BY', 'GROUP_CONCAT', 'HAVING', 'HEAP', 'HIGH_PRIORITY', 'HOSTS', 'HOUR_MINUTE', 'HOUR_SECOND', 'IDENTIFIED', 'IGNORE', 'IN', 'INDEX', 'INDEXES', 'INFILE', 'INNER JOIN', 'INSERT INTO SELECT', 'INSERT INTO', 'INSERT_ID', 'INSERT_METHOD', 'INTERVAL', 'INTO', 'INVOKER', 'IS NOT NULL', 'IS NULL', 'ISOLATION', 'JOIN', 'KEY', 'KEYS', 'KILL', 'LEADING', 'LEFT JOIN', 'LEVEL', 'LIKE', 'LIMIT', 'LINEAR', 'LINES', 'LOAD', 'LOCAL', 'LOCK', 'LOCKS', 'LOGS', 'LOW_PRIORITY', 'MARIA', 'MASTER_CONNECT_RETRY', 'MASTER_HOST', 'MASTER_LOG_FILE', 'MASTER', 'MATCH', 'MAX_CONNECTIONS_PER_HOUR', 'MAX_QUERIES_PER_HOUR', 'MAX_ROWS', 'MAX_UPDATES_PER_HOUR', 'MAX_USER_CONNECTIONS', 'MEDIUM', 'MERGE', 'MIN_ROWS', 'MINUTE_SECOND', 'MODE', 'MODIFY', 'MRG_MYISAM', 'MYISAM', 'NAMES', 'NATURAL', 'NOT NULL', 'NOT', 'NOW()', 'NULL', 'OFFSET', 'ON DELETE', 'ON UPDATE', 'ON', 'ONLY', 'OPEN', 'OPTIMIZE', 'OPTION', 'OPTIONALLY', 'OR', 'ORDER BY', 'OUTER JOIN', 'OUTFILE', 'PACK_KEYS', 'PAGE', 'PARTIAL', 'PARTITION', 'PARTITIONS', 'PASSWORD', 'PRIMARY KEY', 'PRIMARY', 'PRIVILEGES', 'PROCEDURE', 'PROCESS', 'PROCESSLIST', 'PURGE', 'QUICK', 'RAID_CHUNKS', 'RAID_CHUNKSIZE', 'RAID_TYPE', 'RAID0', 'RANGE', 'READ_ONLY', 'READ_WRITE', 'READ', 'REFERENCES', 'RELOAD', 'RENAME', 'REPAIR', 'REPEATABLE', 'REPLICATION', 'RESET', 'RESTORE', 'RESTRICT', 'RETURN', 'RETURNS', 'REVOKE', 'RIGHT JOIN', 'ROLLBACK', 'ROW_FORMAT', 'ROW', 'ROWNUM', 'ROWS', 'SECURITY', 'SELECT DISTINCT', 'SELECT INTO', 'SELECT TOP', 'SELECT', 'SEPARATOR', 'SERIALIZABLE', 'SESSION', 'SET', 'SHARE', 'SHOW', 'SHUTDOWN', 'SLAVE', 'SONAME', 'SOUNDS', 'SQL_AUTO_IS_NULL', 'SQL_BIG_RESULT', 'SQL_BIG_SELECTS', 'SQL_BIG_TABLES', 'SQL_BUFFER_RESULT', 'SQL_CACHE', 'SQL_CALC_FOUND_ROWS', 'SQL_LOG_BIN', 'SQL_LOG_OFF', 'SQL_LOG_UPDATE', 'SQL_LOW_PRIORITY_UPDATES', 'SQL_MAX_JOIN_SIZE', 'SQL_NO_CACHE', 'SQL_QUOTE_SHOW_CREATE', 'SQL_SAFE_UPDATES', 'SQL_SELECT_LIMIT', 'SQL_SLAVE_SKIP_COUNTER', 'SQL_SMALL_RESULT', 'SQL_WARNINGS', 'SQL', 'START', 'STARTING', 'STATUS', 'STOP', 'STORAGE', 'STRAIGHT_JOIN', 'STRING', 'STRIPED', 'SUPER', 'TABLE', 'TABLES', 'TEMPORARY', 'TERMINATED', 'THEN', 'TO', 'TOP', 'TRAILING', 'TRANSACTIONAL', 'TRUE', 'TRUNCATE TABLE', 'TYPE', 'TYPES', 'UNCOMMITTED', 'UNION ALL', 'UNION', 'UNIQUE', 'UNLOCK', 'UNSIGNED', 'UPDATE', 'USAGE', 'USE', 'USING', 'VALUES', 'VARIABLES', 'VIEW', 'WHEN', 'WHERE', 'WITH', 'WORK', 'WRITE', 'YEAR_MONTH'];
var keywords$1 = {
  functions: functions,
  keywords: keywords,
  operators: operators
};

function _templateObject() {
  var data = _taggedTemplateLiteralLoose(["{", " ", "}"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}
var defaultOptions = {
  format: true,
  noColors: false,
  settings: {
    functions: {
      color: '#ff5555',
      modifiers: ['bold']
    },
    keywords: {
      color: '#ff5555',
      modifiers: ['bold']
    },
    operators: {
      color: '#91B859',
      modifiers: ['bold']
    },
    strings: {
      color: '#FFFFF'
    },
    numbers: {
      color: '#50fa7b'
    }
  }
};

var substitute = function substitute(word, _ref) {
  var _ref$color = _ref.color,
      color = _ref$color === void 0 ? '#FFFFFF' : _ref$color,
      _ref$modifiers = _ref.modifiers,
      modifiers = _ref$modifiers === void 0 ? [] : _ref$modifiers;
  var ctx = new chalk.Instance({
    level: 3
  }); // @ts-ignore

  ctx.customColor = ctx.hex(color);
  var chalkModifiers = ['customColor'].concat(modifiers).join('.');
  return ctx(_templateObject(), chalkModifiers, word);
};

var colorKeywords = function colorKeywords(query, words, settings) {
  var pattern = function pattern(word) {
    return new RegExp("\\b" + word + "\\b", 'gmi');
  };

  Object.keys(words).forEach(function (key) {
    words[key].forEach(function (word) {
      query = query.replace(pattern(word), substitute(word, settings[key]));
    });
  });
  return query;
};

var colorValues = function colorValues(query, settings) {
  var regexes = {
    strings: /('\w+')/gim,
    numbers: /(\s\b\d+\b)/gim
  };
  Object.keys(regexes).forEach(function (reg) {
    query = query.replace(regexes[reg], substitute('$1', settings[reg]));
  });
  return query;
};

var prettify = function prettify(query, options) {
  if (options === void 0) {
    options = {};
  }

  var _defaultOptions$optio = _extends({}, defaultOptions, {}, options),
      format = _defaultOptions$optio.format,
      noColors = _defaultOptions$optio.noColors;

  var settings = _extends({}, defaultOptions.settings, {}, options.settings);

  if (format) query = sqlFormatter.format(query);
  if (noColors) return query;
  query = colorKeywords(query, keywords$1, settings);
  query = colorValues(query, settings);
  return query;
};

exports.prettify = prettify;
//# sourceMappingURL=sql-log-prettifier.cjs.development.js.map
